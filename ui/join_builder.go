package ui

import (
	"context"
	"fmt"
	"strings"
	"testing-platform/db"
	"testing-platform/db/models"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/dialog"
	"fyne.io/fyne/v2/widget"
)

type JoinBuilderWindow struct {
	window     fyne.Window
	repository *db.Repository
	mainWindow fyne.Window

	mainTableSelect  *widget.Select
	joinTypeSelect   *widget.Select
	joinTableSelect  *widget.Select
	mainColumnSelect *widget.Select
	joinColumnSelect *widget.Select

	additionalJoins *widget.Accordion
	resultTable     *widget.Table
	resultLabel     *widget.Label
	sqlPreview      *widget.Entry

	tables       []string
	tableColumns map[string][]models.ColumnInfo
}

func NewJoinBuilderWindow(repo *db.Repository, mainWindow fyne.Window) *JoinBuilderWindow {
	j := &JoinBuilderWindow{
		repository:   repo,
		mainWindow:   mainWindow,
		window:       fyne.CurrentApp().NewWindow("–ú–∞—Å—Ç–µ—Ä JOIN"),
		tableColumns: make(map[string][]models.ColumnInfo),
	}

	j.buildUI()
	j.loadTables()
	return j
}

func (j *JoinBuilderWindow) buildUI() {
	j.mainTableSelect = widget.NewSelect([]string{}, j.onMainTableSelected)
	j.mainTableSelect.PlaceHolder = "–û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞"

	j.joinTypeSelect = widget.NewSelect([]string{
		"INNER JOIN", "LEFT JOIN", "RIGHT JOIN", "FULL JOIN",
	}, nil)
	j.joinTypeSelect.SetSelected("INNER JOIN")
	j.joinTypeSelect.PlaceHolder = "–¢–∏–ø JOIN"

	j.joinTableSelect = widget.NewSelect([]string{}, j.onJoinTableSelected)
	j.joinTableSelect.PlaceHolder = "–¢–∞–±–ª–∏—Ü–∞ –¥–ª—è JOIN"

	j.mainColumnSelect = widget.NewSelect([]string{}, nil)
	j.mainColumnSelect.PlaceHolder = "–°—Ç–æ–ª–±–µ—Ü –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã"

	j.joinColumnSelect = widget.NewSelect([]string{}, nil)
	j.joinColumnSelect.PlaceHolder = "–°—Ç–æ–ª–±–µ—Ü –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º–æ–π —Ç–∞–±–ª–∏—Ü—ã"

	j.sqlPreview = widget.NewMultiLineEntry()
	j.sqlPreview.Wrapping = fyne.TextWrapOff
	j.sqlPreview.SetPlaceHolder("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω SQL-–∑–∞–ø—Ä–æ—Å...")

	j.resultLabel = widget.NewLabel("–ü–æ—Å—Ç—Ä–æ–π—Ç–µ JOIN –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
	j.resultLabel.Wrapping = fyne.TextWrapWord

	// –¢–∞–±–ª–∏—Ü–∞ —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Ç–µ–∫—Å—Ç–∞
	j.resultTable = widget.NewTable(
		func() (int, int) { return 0, 0 },
		func() fyne.CanvasObject {
			label := widget.NewLabel("")
			label.Wrapping = fyne.TextWrapWord
			return label
		},
		func(i widget.TableCellID, o fyne.CanvasObject) {},
	)

	// –î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö JOIN
	j.additionalJoins = widget.NewAccordion()

	addJoinBtn := widget.NewButton("–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ JOIN", j.addAdditionalJoin)
	executeBtn := widget.NewButton("–í—ã–ø–æ–ª–Ω–∏—Ç—å JOIN", j.executeJoin)
	clearBtn := widget.NewButton("–û—á–∏—Å—Ç–∏—Ç—å", j.clearForm)

	// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
	hintLabel := widget.NewLabel("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏:\n‚Ä¢ –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É\n‚Ä¢ –ó–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è JOIN –∏ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —Å–≤—è–∑–∏\n‚Ä¢ INNER JOIN - —Ç–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏\n‚Ä¢ LEFT JOIN - –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ª–µ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã\n‚Ä¢ RIGHT JOIN - –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ø—Ä–∞–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã\n‚Ä¢ FULL JOIN - –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –æ–±–µ–∏—Ö —Ç–∞–±–ª–∏—Ü")
	hintLabel.Wrapping = fyne.TextWrapWord

	// –ö–æ–º–ø–æ–Ω–æ–≤–∫–∞
	joinForm := container.NewVBox(
		widget.NewLabel("–û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞:"),
		j.mainTableSelect,
		widget.NewLabel("–¢–∏–ø JOIN:"),
		j.joinTypeSelect,
		widget.NewLabel("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º–∞—è —Ç–∞–±–ª–∏—Ü–∞:"),
		j.joinTableSelect,
		widget.NewLabel("–°—Ç–æ–ª–±–µ—Ü –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã:"),
		j.mainColumnSelect,
		widget.NewLabel("–°—Ç–æ–ª–±–µ—Ü –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º–æ–π —Ç–∞–±–ª–∏—Ü—ã:"),
		j.joinColumnSelect,
	)

	formContainer := container.NewVScroll(container.NewVBox(
		joinForm,
		hintLabel,
		addJoinBtn,
		j.additionalJoins,
		container.NewHBox(executeBtn, clearBtn),
		widget.NewLabel("SQL –∑–∞–ø—Ä–æ—Å:"),
		j.sqlPreview,
	))

	// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É —Ñ–æ—Ä–º—ã
	formContainer.SetMinSize(fyne.NewSize(0, 300))

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
	resultContainer := container.NewBorder(
		j.resultLabel, nil, nil, nil,
		container.NewScroll(j.resultTable),
	)

	// –†–∞–∑–¥–µ–ª—è–µ–º —ç–∫—Ä–∞–Ω –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
	split := container.NewVSplit(
		formContainer,
		resultContainer,
	)
	split.SetOffset(0.4) // 40% –¥–ª—è —Ñ–æ—Ä–º—ã, 60% –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

	j.window.SetContent(split)
	j.window.Resize(fyne.NewSize(1200, 800))
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã JOIN
func (j *JoinBuilderWindow) validateJoinForm() error {
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
	if j.mainTableSelect.Selected == "" {
		return fmt.Errorf("–Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –æ—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞")
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ JOIN
	if j.joinTypeSelect.Selected == "" {
		return fmt.Errorf("–Ω–µ –≤—ã–±—Ä–∞–Ω —Ç–∏–ø JOIN")
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º–æ–π —Ç–∞–±–ª–∏—Ü—ã
	if j.joinTableSelect.Selected == "" {
		return fmt.Errorf("–Ω–µ –≤—ã–±—Ä–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è JOIN")
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã —Ä–∞–∑–Ω—ã–µ
	if j.mainTableSelect.Selected == j.joinTableSelect.Selected {
		return fmt.Errorf("–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å JOIN –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å —Å–æ–±–æ–π")
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
	if j.mainColumnSelect.Selected == "" {
		return fmt.Errorf("–Ω–µ –≤—ã–±—Ä–∞–Ω —Å—Ç–æ–ª–±–µ—Ü –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã")
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
	if !j.columnExists(j.mainTableSelect.Selected, j.mainColumnSelect.Selected) {
		return fmt.Errorf("–≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü '%s' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ '%s'",
			j.mainColumnSelect.Selected, j.mainTableSelect.Selected)
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º–æ–π —Ç–∞–±–ª–∏—Ü—ã
	if j.joinColumnSelect.Selected == "" {
		return fmt.Errorf("–Ω–µ –≤—ã–±—Ä–∞–Ω —Å—Ç–æ–ª–±–µ—Ü –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º–æ–π —Ç–∞–±–ª–∏—Ü—ã")
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –≤ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º–æ–π —Ç–∞–±–ª–∏—Ü–µ
	if !j.columnExists(j.joinTableSelect.Selected, j.joinColumnSelect.Selected) {
		return fmt.Errorf("–≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü '%s' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ '%s'",
			j.joinColumnSelect.Selected, j.joinTableSelect.Selected)
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö JOIN
	for i, item := range j.additionalJoins.Items {
		if err := j.validateAdditionalJoin(item, i+1); err != nil {
			return err
		}
	}

	return nil
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ JOIN
func (j *JoinBuilderWindow) validateAdditionalJoin(item *widget.AccordionItem, joinNumber int) error {
	content, ok := item.Detail.(*fyne.Container)
	if !ok || len(content.Objects) < 7 {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–º JOIN %d: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–æ—Ä–º—ã", joinNumber)
	}

	joinTypeWidget, ok := content.Objects[0].(*widget.Select)
	if !ok || joinTypeWidget.Selected == "" {
		return fmt.Errorf("–≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–º JOIN %d –Ω–µ –≤—ã–±—Ä–∞–Ω —Ç–∏–ø JOIN", joinNumber)
	}

	tableWidget, ok := content.Objects[1].(*widget.Select)
	if !ok || tableWidget.Selected == "" {
		return fmt.Errorf("–≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–º JOIN %d –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞", joinNumber)
	}

	mainColWidget, ok := content.Objects[3].(*widget.Select)
	if !ok || mainColWidget.Selected == "" {
		return fmt.Errorf("–≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–º JOIN %d –Ω–µ –≤—ã–±—Ä–∞–Ω —Å—Ç–æ–ª–±–µ—Ü –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ç–∞–±–ª–∏—Ü—ã", joinNumber)
	}

	joinColWidget, ok := content.Objects[5].(*widget.Select)
	if !ok || joinColWidget.Selected == "" {
		return fmt.Errorf("–≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–º JOIN %d –Ω–µ –≤—ã–±—Ä–∞–Ω —Å—Ç–æ–ª–±–µ—Ü –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º–æ–π —Ç–∞–±–ª–∏—Ü—ã", joinNumber)
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤
	if !j.columnExistsInAnyTable(mainColWidget.Selected) {
		return fmt.Errorf("–≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–º JOIN %d: —Å—Ç–æ–ª–±–µ—Ü '%s' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö",
			joinNumber, mainColWidget.Selected)
	}

	if !j.columnExists(tableWidget.Selected, joinColWidget.Selected) {
		return fmt.Errorf("–≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–º JOIN %d: —Å—Ç–æ–ª–±–µ—Ü '%s' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ '%s'",
			joinNumber, joinColWidget.Selected, tableWidget.Selected)
	}

	return nil
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ
func (j *JoinBuilderWindow) columnExists(table, column string) bool {
	columns, exists := j.tableColumns[table]
	if !exists {
		return false
	}

	for _, col := range columns {
		if col.Name == column {
			return true
		}
	}
	return false
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞ –≤ –ª—é–±–æ–π –∏–∑ —Ç–∞–±–ª–∏—Ü
func (j *JoinBuilderWindow) columnExistsInAnyTable(column string) bool {
	for _, columns := range j.tableColumns {
		for _, col := range columns {
			if col.Name == column {
				return true
			}
		}
	}
	return false
}

func (j *JoinBuilderWindow) loadTables() {
	tables, err := j.repository.GetTables(context.Background())
	if err != nil {
		j.showError(fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"))
		return
	}

	if len(tables) == 0 {
		j.showError(fmt.Errorf("–≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã"))
		return
	}

	j.tables = tables
	j.mainTableSelect.Options = tables
	j.joinTableSelect.Options = tables
	j.mainTableSelect.Refresh()
	j.joinTableSelect.Refresh()
}

func (j *JoinBuilderWindow) onMainTableSelected(table string) {
	if table == "" {
		return
	}
	j.loadTableColumns(table)
	j.updateColumnSelectors()

	// –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ JOIN –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
	j.updateAdditionalJoins()
}

func (j *JoinBuilderWindow) onJoinTableSelected(table string) {
	if table == "" {
		return
	}
	j.loadTableColumns(table)
	j.updateColumnSelectors()
}

func (j *JoinBuilderWindow) loadTableColumns(table string) {
	if table == "" {
		return
	}

	// –ï—Å–ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à
	if _, exists := j.tableColumns[table]; exists {
		return
	}

	columns, err := j.repository.GetTableColumns(context.Background(), table)
	if err != nil {
		j.showError(fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–æ–ª–±—Ü—ã —Ç–∞–±–ª–∏—Ü—ã '%s': –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞", table))
		return
	}

	j.tableColumns[table] = columns
}

func (j *JoinBuilderWindow) updateColumnSelectors() {
	mainTable := j.mainTableSelect.Selected
	joinTable := j.joinTableSelect.Selected

	if mainTable != "" {
		var mainColumnNames []string
		if columns, exists := j.tableColumns[mainTable]; exists {
			for _, col := range columns {
				mainColumnNames = append(mainColumnNames, col.Name)
			}
		}
		j.mainColumnSelect.Options = mainColumnNames
		j.mainColumnSelect.Refresh()
	}

	if joinTable != "" {
		var joinColumnNames []string
		if columns, exists := j.tableColumns[joinTable]; exists {
			for _, col := range columns {
				joinColumnNames = append(joinColumnNames, col.Name)
			}
		}
		j.joinColumnSelect.Options = joinColumnNames
		j.joinColumnSelect.Refresh()
	}
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö JOIN
func (j *JoinBuilderWindow) getAllAvailableColumns() []string {
	var allColumns []string

	// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
	if mainTable := j.mainTableSelect.Selected; mainTable != "" {
		if columns, exists := j.tableColumns[mainTable]; exists {
			for _, col := range columns {
				allColumns = append(allColumns, col.Name)
			}
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã –∏–∑ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º–æ–π —Ç–∞–±–ª–∏—Ü—ã
	if joinTable := j.joinTableSelect.Selected; joinTable != "" {
		if columns, exists := j.tableColumns[joinTable]; exists {
			for _, col := range columns {
				allColumns = append(allColumns, col.Name)
			}
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã –∏–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö JOIN
	for _, item := range j.additionalJoins.Items {
		content := item.Detail.(*fyne.Container)
		if len(content.Objects) >= 2 {
			tableWidget := content.Objects[1].(*widget.Select)
			if tableWidget.Selected != "" {
				if columns, exists := j.tableColumns[tableWidget.Selected]; exists {
					for _, col := range columns {
						allColumns = append(allColumns, col.Name)
					}
				}
			}
		}
	}

	return allColumns
}

func (j *JoinBuilderWindow) addAdditionalJoin() {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
	if j.mainTableSelect.Selected == "" {
		j.showError(fmt.Errorf("—Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É"))
		return
	}

	// –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ JOIN
	joinType := widget.NewSelect([]string{"INNER JOIN", "LEFT JOIN", "RIGHT JOIN", "FULL JOIN"}, nil)
	joinType.SetSelected("INNER JOIN")

	tableSelect := widget.NewSelect(j.tables, nil)
	tableSelect.PlaceHolder = "–¢–∞–±–ª–∏—Ü–∞"

	mainColumn := widget.NewSelect([]string{}, nil)
	mainColumn.PlaceHolder = "–°—Ç–æ–ª–±–µ—Ü –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ç–∞–±–ª–∏—Ü—ã"

	joinColumn := widget.NewSelect([]string{}, nil)
	joinColumn.PlaceHolder = "–°—Ç–æ–ª–±–µ—Ü –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º–æ–π —Ç–∞–±–ª–∏—Ü—ã"

	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã –∫–æ–≥–¥–∞ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è —Ç–∞–±–ª–∏—Ü–∞
	tableSelect.OnChanged = func(table string) {
		if table == "" {
			return
		}
		j.loadTableColumns(table)
		if cols, exists := j.tableColumns[table]; exists {
			var columnNames []string
			for _, col := range cols {
				columnNames = append(columnNames, col.Name)
			}
			joinColumn.Options = columnNames
			joinColumn.Refresh()
		}
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
	updateMainColumns := func() {
		availableColumns := j.getAllAvailableColumns()
		mainColumn.Options = availableColumns
		mainColumn.Refresh()
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –∏–ª–∏ –¥—Ä—É–≥–∏—Ö JOIN
	j.mainTableSelect.OnChanged = func(string) { updateMainColumns() }
	j.joinTableSelect.OnChanged = func(string) { updateMainColumns() }

	removeBtn := widget.NewButton("‚úï", nil)

	joinForm := container.NewHBox(
		joinType,
		tableSelect,
		widget.NewLabel("ON"),
		mainColumn,
		widget.NewLabel("="),
		joinColumn,
		removeBtn,
	)

	item := widget.NewAccordionItem(fmt.Sprintf("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π JOIN %d", len(j.additionalJoins.Items)+1), joinForm)

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
	removeBtn.OnTapped = func() {
		items := j.additionalJoins.Items
		for i, it := range items {
			if it == item {
				j.additionalJoins.Items = append(items[:i], items[i+1:]...)
				j.additionalJoins.Refresh()
				break
			}
		}
	}

	j.additionalJoins.Append(item)
	j.additionalJoins.Refresh()

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤
	updateMainColumns()
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö JOIN –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
func (j *JoinBuilderWindow) updateAdditionalJoins() {
	for _, item := range j.additionalJoins.Items {
		content := item.Detail.(*fyne.Container)
		if len(content.Objects) >= 4 {
			mainColWidget := content.Objects[3].(*widget.Select)
			availableColumns := j.getAllAvailableColumns()
			mainColWidget.Options = availableColumns
			mainColWidget.Refresh()
		}
	}
}

func (j *JoinBuilderWindow) buildJoinQuery() (string, error) {
	// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
	if err := j.validateJoinForm(); err != nil {
		return "", err
	}

	mainTable := j.mainTableSelect.Selected
	joinTable := j.joinTableSelect.Selected
	joinType := strings.Replace(j.joinTypeSelect.Selected, " JOIN", "", 1)

	// –ë–∞–∑–æ–≤—ã–π JOIN
	query := fmt.Sprintf("SELECT * FROM %s %s %s ON %s.%s = %s.%s",
		mainTable, joinType, joinTable,
		mainTable, j.mainColumnSelect.Selected,
		joinTable, j.joinColumnSelect.Selected)

	// –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ JOIN
	for i, item := range j.additionalJoins.Items {
		content := item.Detail.(*fyne.Container)
		if len(content.Objects) >= 6 {
			joinTypeWidget := content.Objects[0].(*widget.Select)
			tableWidget := content.Objects[1].(*widget.Select)
			mainColWidget := content.Objects[3].(*widget.Select)
			joinColWidget := content.Objects[5].(*widget.Select)

			if joinTypeWidget.Selected != "" && tableWidget.Selected != "" &&
				mainColWidget.Selected != "" && joinColWidget.Selected != "" {
				joinType := strings.Replace(joinTypeWidget.Selected, " JOIN", "", 1)
				query += fmt.Sprintf(" %s %s ON %s = %s.%s",
					joinType, tableWidget.Selected,
					mainColWidget.Selected, tableWidget.Selected, joinColWidget.Selected)
			} else {
				return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–º JOIN %d: –Ω–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã", i+1)
			}
		}
	}

	query += " LIMIT 100"
	return query, nil
}

func (j *JoinBuilderWindow) executeJoin() {
	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
	j.resultLabel.SetText("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è JOIN...")
	j.resultTable.Length = func() (int, int) { return 0, 0 }
	j.resultTable.Refresh()

	query, err := j.buildJoinQuery()
	if err != nil {
		j.showError(err)
		j.resultLabel.SetText("–û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö JOIN")
		return
	}

	j.sqlPreview.SetText(query)

	result, err := j.repository.ExecuteQuery(context.Background(), query)
	if err != nil {
		errorMsg := j.formatDatabaseError(err)
		j.showError(fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: %s", errorMsg))
		j.resultLabel.SetText("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ JOIN")
		return
	}

	if result.Error != "" {
		errorMsg := j.formatDatabaseError(fmt.Errorf("result.Error"))
		j.resultLabel.SetText("–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: " + errorMsg)
		return
	}

	j.displayResults(result)
	j.resultLabel.SetText(fmt.Sprintf("–ù–∞–π–¥–µ–Ω–æ %d —Å—Ç—Ä–æ–∫", len(result.Rows)))
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
func (j *JoinBuilderWindow) formatDatabaseError(err error) string {
	errorStr := err.Error()

	if strings.Contains(errorStr, "syntax error") {
		return "—Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ SQL –∑–∞–ø—Ä–æ—Å–µ"
	}
	if strings.Contains(errorStr, "does not exist") {
		return "—Ç–∞–±–ª–∏—Ü–∞ –∏–ª–∏ —Å—Ç–æ–ª–±–µ—Ü –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
	}
	if strings.Contains(errorStr, "permission denied") {
		return "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏"
	}
	if strings.Contains(errorStr, "invalid input syntax") {
		return "–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"
	}
	if strings.Contains(errorStr, "ambiguous column") {
		return "–Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ–µ –∏–º—è —Å—Ç–æ–ª–±—Ü–∞ (—Å—Ç–æ–ª–±–µ—Ü –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö)"
	}
	if strings.Contains(errorStr, "join") && strings.Contains(errorStr, "missing") {
		return "–æ—à–∏–±–∫–∞ –≤ —É—Å–ª–æ–≤–∏–∏ JOIN: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —É–∫–∞–∑–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –∏ —Å—Ç–æ–ª–±—Ü–æ–≤"
	}
	if strings.Contains(errorStr, "foreign key") {
		return "–Ω–∞—Ä—É—à–µ–Ω–∏–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –∫–ª—é—á–∞"
	}
	if strings.Contains(errorStr, "timeout") {
		return "–ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞"
	}

	return "–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
}

func (j *JoinBuilderWindow) displayResults(result *models.QueryResult) {
	if len(result.Rows) == 0 {
		j.resultTable.Length = func() (int, int) { return 1, 1 }
		j.resultTable.UpdateCell = func(id widget.TableCellID, obj fyne.CanvasObject) {
			label := obj.(*widget.Label)
			label.Wrapping = fyne.TextWrapWord
			if id.Row == 0 && id.Col == 0 {
				label.SetText("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
			}
		}
		j.resultLabel.SetText("JOIN –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ, –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö —Å—Ç—Ä–æ–∫")
		return
	}

	j.resultTable.Length = func() (int, int) {
		return len(result.Rows) + 1, len(result.Columns)
	}

	// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
	for col := 0; col < len(result.Columns); col++ {
		maxWidth := float32(150)
		headerWidth := float32(len(result.Columns[col])) * 8
		if headerWidth > maxWidth {
			maxWidth = headerWidth
		}
		for row := 0; row < len(result.Rows) && row < 10; row++ {
			if value := result.Rows[row][result.Columns[col]]; value != nil {
				text := fmt.Sprintf("%v", value)
				textWidth := float32(len(text)) * 7
				if textWidth > maxWidth {
					maxWidth = textWidth
				}
			}
		}
		if maxWidth > 400 {
			maxWidth = 400
		}
		j.resultTable.SetColumnWidth(col, maxWidth)
	}

	j.resultTable.UpdateCell = func(id widget.TableCellID, obj fyne.CanvasObject) {
		label := obj.(*widget.Label)
		label.Wrapping = fyne.TextWrapWord

		if id.Row == 0 {
			if id.Col < len(result.Columns) {
				label.SetText(result.Columns[id.Col])
				label.TextStyle = fyne.TextStyle{Bold: true}
			}
		} else {
			rowIndex := id.Row - 1
			if rowIndex < len(result.Rows) && id.Col < len(result.Columns) {
				value := result.Rows[rowIndex][result.Columns[id.Col]]
				if value != nil {
					label.SetText(fmt.Sprintf("%v", value))
				} else {
					label.SetText("NULL")
				}
			}
		}
	}

	j.resultTable.Refresh()
}

func (j *JoinBuilderWindow) clearForm() {
	j.mainTableSelect.SetSelected("")
	j.joinTableSelect.SetSelected("")
	j.mainColumnSelect.SetSelected("")
	j.joinColumnSelect.SetSelected("")
	j.additionalJoins.Items = nil
	j.additionalJoins.Refresh()
	j.sqlPreview.SetText("")
	j.resultLabel.SetText("–ü–æ—Å—Ç—Ä–æ–π—Ç–µ JOIN –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
	j.resultTable.Length = func() (int, int) { return 0, 0 }
	j.resultTable.Refresh()
}

func (j *JoinBuilderWindow) showError(err error) {
	customDialog := dialog.NewCustom(
		"–û—à–∏–±–∫–∞",
		"–ó–∞–∫—Ä—ã—Ç—å",
		container.NewVBox(
			widget.NewLabel("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:"),
			widget.NewLabel(err.Error()),
			widget.NewLabel(""),
			widget.NewLabel("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."),
		),
		j.window,
	)
	customDialog.Show()
}

func (j *JoinBuilderWindow) Show() {
	j.window.Show()
}
