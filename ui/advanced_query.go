package ui

import (
	"context"
	"fmt"
	"regexp"
	"strconv"
	"strings"
	"testing-platform/db"
	"testing-platform/db/models"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/dialog"
	"fyne.io/fyne/v2/widget"
)

type AdvancedQueryWindow struct {
	window     fyne.Window
	repository *db.Repository
	mainWindow fyne.Window

	// –≠–ª–µ–º–µ–Ω—Ç—ã SELECT
	tableSelect      *widget.Select
	columnList       *widget.CheckGroup
	whereContainer   *fyne.Container // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É—Å–ª–æ–≤–∏–π WHERE
	orderByContainer *fyne.Container // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è ORDER BY —É—Å–ª–æ–≤–∏–π
	groupByList      *widget.Select  // –°–ø–∏—Å–æ–∫ –¥–ª—è GROUP BY
	havingContainer  *fyne.Container // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è HAVING
	limitSlider      *widget.Slider  // –°–ª–∞–π–¥–µ—Ä –¥–ª—è LIMIT
	limitLabel       *widget.Label   // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è LIMIT

	// –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
	resultTable *widget.Table
	resultLabel *widget.Label
	sqlPreview  *widget.Entry

	currentColumns    []models.ColumnInfo
	whereConditions   []WhereCondition   // –•—Ä–∞–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π WHERE
	orderByConditions []OrderByCondition // –•—Ä–∞–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π ORDER BY
	havingConditions  []WhereCondition   // –•—Ä–∞–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π HAVING
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π WHERE/HAVING
type WhereCondition struct {
	Column   string
	Operator string
	Value    string
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π ORDER BY
type OrderByCondition struct {
	Column    string
	Direction string
}

func NewAdvancedQueryWindow(repo *db.Repository, mainWindow fyne.Window) *AdvancedQueryWindow {
	a := &AdvancedQueryWindow{
		repository:        repo,
		mainWindow:        mainWindow,
		window:            fyne.CurrentApp().NewWindow("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π SELECT"),
		whereConditions:   []WhereCondition{},
		orderByConditions: []OrderByCondition{},
		havingConditions:  []WhereCondition{},
	}

	a.buildUI()
	a.loadTables()
	return a
}

func (a *AdvancedQueryWindow) buildUI() {
	a.tableSelect = widget.NewSelect([]string{}, a.onTableSelected)
	a.tableSelect.PlaceHolder = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É"

	a.columnList = widget.NewCheckGroup([]string{}, nil)
	a.columnList.Horizontal = false

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –¥–ª—è —É—Å–ª–æ–≤–∏–π
	a.whereContainer = container.NewVBox()
	a.orderByContainer = container.NewVBox()
	a.havingContainer = container.NewVBox()

	// GROUP BY —ç–ª–µ–º–µ–Ω—Ç—ã
	a.groupByList = widget.NewSelect([]string{}, nil)
	a.groupByList.PlaceHolder = "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏"

	// LIMIT —ç–ª–µ–º–µ–Ω—Ç—ã
	a.limitSlider = widget.NewSlider(1, 10000) // –£–≤–µ–ª–∏—á–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç
	a.limitSlider.SetValue(100)
	a.limitLabel = widget.NewLabel("LIMIT: 100")
	a.limitSlider.OnChanged = func(value float64) {
		a.limitLabel.SetText(fmt.Sprintf("LIMIT: %d", int(value)))
	}

	a.sqlPreview = widget.NewMultiLineEntry()
	a.sqlPreview.Wrapping = fyne.TextWrapOff
	a.sqlPreview.SetPlaceHolder("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω SQL-–∑–∞–ø—Ä–æ—Å...")

	a.resultLabel = widget.NewLabel("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å")
	a.resultLabel.Wrapping = fyne.TextWrapWord

	// –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Ç–µ–∫—Å—Ç–∞
	a.resultTable = widget.NewTable(
		func() (int, int) { return 0, 0 },
		func() fyne.CanvasObject {
			label := widget.NewLabel("")
			label.Wrapping = fyne.TextWrapWord
			return label
		},
		func(i widget.TableCellID, o fyne.CanvasObject) {},
	)

	// –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å–ª–æ–≤–∏—è–º–∏
	addWhereBtn := widget.NewButton("–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª–æ–≤–∏–µ WHERE", a.addWhereCondition)
	addOrderByBtn := widget.NewButton("–î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É ORDER BY", a.addOrderByCondition)
	addHavingBtn := widget.NewButton("–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª–æ–≤–∏–µ HAVING", a.addHavingCondition)
	executeBtn := widget.NewButton("–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å", a.executeQuery)
	clearBtn := widget.NewButton("–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë", a.clearForm)
	showSQLBtn := widget.NewButton("–ü–æ–∫–∞–∑–∞—Ç—å SQL", a.previewSQL)

	// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
	hintLabel := widget.NewLabel("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏:\n‚Ä¢ –î–ª—è LIKE –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ % –¥–ª—è –ø–æ–∏—Å–∫–∞ —á–∞—Å—Ç–µ–π —Ç–µ–∫—Å—Ç–∞\n‚Ä¢ –î–ª—è IN –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n‚Ä¢ IS NULL –∏ IS NOT NULL –Ω–µ —Ç—Ä–µ–±—É—é—Ç –∑–Ω–∞—á–µ–Ω–∏—è")
	hintLabel.Wrapping = fyne.TextWrapWord

	whereLabel := widget.NewLabel("–£—Å–ª–æ–≤–∏—è WHERE:")
	whereLabel.TextStyle = fyne.TextStyle{Bold: true}

	orderByLabel := widget.NewLabel("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ ORDER BY:")
	orderByLabel.TextStyle = fyne.TextStyle{Bold: true}

	groupByLabel := widget.NewLabel("GROUP BY:")
	groupByLabel.TextStyle = fyne.TextStyle{Bold: true}

	havingLabel := widget.NewLabel("–£—Å–ª–æ–≤–∏—è HAVING:")
	havingLabel.TextStyle = fyne.TextStyle{Bold: true}

	limitLabelTitle := widget.NewLabel("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
	limitLabelTitle.TextStyle = fyne.TextStyle{Bold: true}

	// –ö–æ–º–ø–æ–Ω–æ–≤–∫–∞
	leftPanel := container.NewVBox(
		widget.NewLabel("–¢–∞–±–ª–∏—Ü–∞:"),
		a.tableSelect,
		widget.NewLabel("–°—Ç–æ–ª–±—Ü—ã:"),
		container.NewScroll(a.columnList),
	)

	conditionsPanel := container.NewVBox(
		whereLabel,
		a.whereContainer,
		addWhereBtn,
		widget.NewSeparator(),
		orderByLabel,
		a.orderByContainer,
		addOrderByBtn,
		widget.NewSeparator(),
		groupByLabel,
		a.groupByList,
		widget.NewSeparator(),
		havingLabel,
		a.havingContainer,
		addHavingBtn,
		widget.NewSeparator(),
		limitLabelTitle,
		a.limitLabel,
		a.limitSlider,
		widget.NewSeparator(),
		hintLabel,
	)

	buttonsContainer := container.NewHBox(executeBtn, showSQLBtn, clearBtn)

	rightPanel := container.NewVBox(
		conditionsPanel,
		buttonsContainer,
	)

	// –°–æ–∑–¥–∞–µ–º HBox –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è
	controls := container.NewHBox(leftPanel, rightPanel)

	content := container.NewBorder(
		controls,
		container.NewVBox(a.resultLabel, widget.NewLabel("SQL:"), a.sqlPreview),
		nil, nil,
		container.NewScroll(a.resultTable),
	)

	a.window.SetContent(content)
	a.window.Resize(fyne.NewSize(1200, 800))
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —É—Å–ª–æ–≤–∏—è WHERE/HAVING
func (a *AdvancedQueryWindow) validateConditionValue(operator, value string) error {
	if value == "" {
		return nil // –ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ø—É—Å—Ç–∏–º–æ
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è
	if len(value) > 1000 {
		return fmt.Errorf("–∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤)")
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–ø–∞—Å–Ω—ã–µ SQL-–∏–Ω—ä–µ–∫—Ü–∏–∏
	dangerousPatterns := []string{
		";", "--", "/*", "*/", "xp_", "sp_", "exec ", "union ", "select ", "insert ",
		"update ", "delete ", "drop ", "create ", "alter ", "grant ", "revoke ",
	}

	lowerValue := strings.ToLower(value)
	for _, dangerous := range dangerousPatterns {
		if strings.Contains(lowerValue, dangerous) {
			return fmt.Errorf("–∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã")
		}
	}

	// –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
	switch operator {
	case "IN", "NOT IN":
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Å–ø–∏—Å–∫–∞
		if matched, _ := regexp.MatchString(`^[a-zA-Z0-9_,\.\s]+$`, value); !matched {
			return fmt.Errorf("–¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ IN –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –∑–∞–ø—è—Ç—ã–µ –∏ —Ç–æ—á–∫–∏")
		}
	case "LIKE", "NOT LIKE":
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ % –∏ _
		if strings.Count(value, "%") > 10 {
			return fmt.Errorf("—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤ %% (–º–∞–∫—Å–∏–º—É–º 10)")
		}
		if strings.Count(value, "_") > 20 {
			return fmt.Errorf("—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤ _ (–º–∞–∫—Å–∏–º—É–º 20)")
		}
	}

	return nil
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
func (a *AdvancedQueryWindow) validateQuery() error {
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã
	if a.tableSelect.Selected == "" {
		return fmt.Errorf("–Ω–µ –≤—ã–±—Ä–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞")
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π WHERE
	for i, condition := range a.whereConditions {
		if condition.Column == "" {
			return fmt.Errorf("–≤ —É—Å–ª–æ–≤–∏–∏ WHERE ‚Ññ%d –Ω–µ –≤—ã–±—Ä–∞–Ω —Å—Ç–æ–ª–±–µ—Ü", i+1)
		}
		if condition.Operator == "" {
			return fmt.Errorf("–≤ —É—Å–ª–æ–≤–∏–∏ WHERE ‚Ññ%d –Ω–µ –≤—ã–±—Ä–∞–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä", i+1)
		}
		// –î–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è
		if condition.Operator != "IS NULL" && condition.Operator != "IS NOT NULL" {
			if strings.TrimSpace(condition.Value) == "" {
				return fmt.Errorf("–≤ —É—Å–ª–æ–≤–∏–∏ WHERE ‚Ññ%d –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ", i+1)
			}
			if err := a.validateConditionValue(condition.Operator, condition.Value); err != nil {
				return fmt.Errorf("–æ—à–∏–±–∫–∞ –≤ —É—Å–ª–æ–≤–∏–∏ WHERE ‚Ññ%d: %v", i+1, err)
			}
		}
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π HAVING
	for i, condition := range a.havingConditions {
		if condition.Column == "" {
			return fmt.Errorf("–≤ —É—Å–ª–æ–≤–∏–∏ HAVING ‚Ññ%d –Ω–µ –≤—ã–±—Ä–∞–Ω —Å—Ç–æ–ª–±–µ—Ü", i+1)
		}
		if condition.Operator == "" {
			return fmt.Errorf("–≤ —É—Å–ª–æ–≤–∏–∏ HAVING ‚Ññ%d –Ω–µ –≤—ã–±—Ä–∞–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä", i+1)
		}
		// –î–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è
		if condition.Operator != "IS NULL" && condition.Operator != "IS NOT NULL" {
			if strings.TrimSpace(condition.Value) == "" {
				return fmt.Errorf("–≤ —É—Å–ª–æ–≤–∏–∏ HAVING ‚Ññ%d –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ", i+1)
			}
			if err := a.validateConditionValue(condition.Operator, condition.Value); err != nil {
				return fmt.Errorf("–æ—à–∏–±–∫–∞ –≤ —É—Å–ª–æ–≤–∏–∏ HAVING ‚Ññ%d: %v", i+1, err)
			}
		}
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π ORDER BY
	for i, condition := range a.orderByConditions {
		if condition.Column == "" {
			return fmt.Errorf("–≤ —É—Å–ª–æ–≤–∏–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ ‚Ññ%d –Ω–µ –≤—ã–±—Ä–∞–Ω —Å—Ç–æ–ª–±–µ—Ü", i+1)
		}
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ GROUP BY
	if a.groupByList.Selected != "" {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–µ–∫—É—â–∏—Ö —Å—Ç–æ–ª–±—Ü–∞—Ö
		found := false
		for _, col := range a.currentColumns {
			if col.Name == a.groupByList.Selected {
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("–≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è GROUP BY –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ")
		}
	}

	return nil
}

func (a *AdvancedQueryWindow) addWhereCondition() {
	a.addCondition(a.whereContainer, &a.whereConditions, "WHERE")
}

func (a *AdvancedQueryWindow) addOrderByCondition() {
	a.addOrderBy()
}

func (a *AdvancedQueryWindow) addHavingCondition() {
	a.addCondition(a.havingContainer, &a.havingConditions, "HAVING")
}

func (a *AdvancedQueryWindow) addCondition(cont *fyne.Container, conditions *[]WhereCondition, conditionType string) {
	// –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ —É—Å–ª–æ–≤–∏—è
	columnSelect := widget.NewSelect([]string{}, nil)
	columnSelect.PlaceHolder = "–°—Ç–æ–ª–±–µ—Ü"

	// –ï—Å–ª–∏ —Å—Ç–æ–ª–±—Ü—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
	if len(a.currentColumns) > 0 {
		columnSelect.Options = a.getColumnNames()
		columnSelect.Refresh()
	}

	operatorSelect := widget.NewSelect([]string{
		"=", "!=", ">", "<", ">=", "<=", "LIKE", "NOT LIKE",
		"IN", "NOT IN", "IS NULL", "IS NOT NULL",
	}, nil)
	operatorSelect.SetSelected("=")

	valueEntry := widget.NewEntry()
	valueEntry.SetPlaceHolder("–ó–Ω–∞—á–µ–Ω–∏–µ")

	// –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—è –∑–Ω–∞—á–µ–Ω–∏—è
	valueEntry.Validator = func(text string) error {
		selectedOperator := operatorSelect.Selected
		if selectedOperator == "" {
			selectedOperator = "=" // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		}
		return a.validateConditionValue(selectedOperator, text)
	}

	// –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Å–ª–æ–≤–∏—è
	deleteBtn := widget.NewButton("‚úï", nil)

	// –°–æ–∑–¥–∞–µ–º HBox –¥–ª—è —Å—Ç—Ä–æ–∫–∏ —É—Å–ª–æ–≤–∏—è
	conditionRow := container.NewHBox(
		columnSelect,
		operatorSelect,
		valueEntry,
		deleteBtn,
	)

	// –°–æ–∑–¥–∞–µ–º —É—Å–ª–æ–≤–∏–µ
	condition := WhereCondition{}
	*conditions = append(*conditions, condition)
	conditionIndex := len(*conditions) - 1

	// –û–±–Ω–æ–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª–µ–π
	updateCondition := func() {
		if conditionIndex < len(*conditions) {
			(*conditions)[conditionIndex] = WhereCondition{
				Column:   columnSelect.Selected,
				Operator: operatorSelect.Selected,
				Value:    valueEntry.Text,
			}
		}
	}

	columnSelect.OnChanged = func(s string) { updateCondition() }
	operatorSelect.OnChanged = func(s string) {
		updateCondition()
		// –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
		valueEntry.Validate()
	}
	valueEntry.OnChanged = func(s string) {
		updateCondition()
		valueEntry.Validate()
	}

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
	deleteBtn.OnTapped = func() {
		if conditionIndex < len(*conditions) {
			// –£–¥–∞–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ –∏–∑ —Å–ª–∞–π—Å–∞
			*conditions = append((*conditions)[:conditionIndex], (*conditions)[conditionIndex+1:]...)
			// –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
			cont.Remove(conditionRow)
		}
	}

	cont.Add(conditionRow)
}

func (a *AdvancedQueryWindow) addOrderBy() {
	// –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
	columnSelect := widget.NewSelect([]string{}, nil)
	columnSelect.PlaceHolder = "–°—Ç–æ–ª–±–µ—Ü"

	// –ï—Å–ª–∏ —Å—Ç–æ–ª–±—Ü—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
	if len(a.currentColumns) > 0 {
		columnSelect.Options = a.getColumnNames()
		columnSelect.Refresh()
	}

	directionSelect := widget.NewSelect([]string{
		"–ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é (ASC)",
		"–ü–æ —É–±—ã–≤–∞–Ω–∏—é (DESC)",
		"–°–ª—É—á–∞–π–Ω–æ (RANDOM)",
		"–ü–æ –¥–ª–∏–Ω–µ —Å—Ç—Ä–æ–∫–∏ (LENGTH)",
		"–ë–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞ (CASE INSENSITIVE)",
	}, nil)
	directionSelect.SetSelected("–ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é (ASC)")

	// –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Å–ª–æ–≤–∏—è
	deleteBtn := widget.NewButton("‚úï", nil)

	// –°–æ–∑–¥–∞–µ–º HBox –¥–ª—è —Å—Ç—Ä–æ–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
	orderByRow := container.NewHBox(
		columnSelect,
		directionSelect,
		deleteBtn,
	)

	// –°–æ–∑–¥–∞–µ–º —É—Å–ª–æ–≤–∏–µ
	condition := OrderByCondition{}
	a.orderByConditions = append(a.orderByConditions, condition)
	conditionIndex := len(a.orderByConditions) - 1

	// –û–±–Ω–æ–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª–µ–π
	updateCondition := func() {
		if conditionIndex < len(a.orderByConditions) {
			// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ SQL –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
			direction := a.getSQLDirection(directionSelect.Selected)
			a.orderByConditions[conditionIndex] = OrderByCondition{
				Column:    columnSelect.Selected,
				Direction: direction,
			}
		}
	}

	columnSelect.OnChanged = func(s string) { updateCondition() }
	directionSelect.OnChanged = func(s string) { updateCondition() }

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
	deleteBtn.OnTapped = func() {
		if conditionIndex < len(a.orderByConditions) {
			// –£–¥–∞–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ –∏–∑ —Å–ª–∞–π—Å–∞
			a.orderByConditions = append(a.orderByConditions[:conditionIndex], a.orderByConditions[conditionIndex+1:]...)
			// –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
			a.orderByContainer.Remove(orderByRow)
		}
	}

	a.orderByContainer.Add(orderByRow)
}

// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ SQL —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
func (a *AdvancedQueryWindow) getSQLDirection(displayDirection string) string {
	switch displayDirection {
	case "–ü–æ —É–±—ã–≤–∞–Ω–∏—é (DESC)":
		return "DESC"
	case "–°–ª—É—á–∞–π–Ω–æ (RANDOM)":
		return "RANDOM()"
	case "–ü–æ –¥–ª–∏–Ω–µ —Å—Ç—Ä–æ–∫–∏ (LENGTH)":
		return "LENGTH"
	case "–ë–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞ (CASE INSENSITIVE)":
		return "COLLATE NOCASE"
	default: // "–ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é (ASC)"
		return "ASC"
	}
}

// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É—Å–ª–æ–≤–∏–µ ORDER BY –¥–ª—è SQL –∑–∞–ø—Ä–æ—Å–∞
func (a *AdvancedQueryWindow) formatOrderByCondition(condition OrderByCondition) string {
	if condition.Column == "" {
		return ""
	}

	switch condition.Direction {
	case "RANDOM()":
		return "RANDOM()"
	case "LENGTH":
		return fmt.Sprintf("LENGTH(%s)", condition.Column)
	case "COLLATE NOCASE":
		return fmt.Sprintf("%s COLLATE NOCASE", condition.Column)
	default:
		return fmt.Sprintf("%s %s", condition.Column, condition.Direction)
	}
}

func (a *AdvancedQueryWindow) getColumnNames() []string {
	var names []string
	for _, col := range a.currentColumns {
		names = append(names, col.Name)
	}
	return names
}

func (a *AdvancedQueryWindow) loadTables() {
	tables, err := a.repository.GetTables(context.Background())
	if err != nil {
		a.showError(fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"))
		return
	}

	if len(tables) == 0 {
		a.showError(fmt.Errorf("–≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã"))
		return
	}

	a.tableSelect.Options = tables
	a.tableSelect.Refresh()
}

func (a *AdvancedQueryWindow) onTableSelected(table string) {
	if table == "" {
		return
	}

	columns, err := a.repository.GetTableColumns(context.Background(), table)
	if err != nil {
		a.showError(fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–æ–ª–±—Ü—ã —Ç–∞–±–ª–∏—Ü—ã '%s': –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞", table))
		return
	}

	a.currentColumns = columns
	var columnNames []string
	for _, col := range columns {
		columnNames = append(columnNames, col.Name)
	}

	if len(columnNames) == 0 {
		a.showError(fmt.Errorf("–≤ —Ç–∞–±–ª–∏—Ü–µ '%s' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç–æ–ª–±—Ü–æ–≤", table))
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –≤—ã–±–æ—Ä–∞
	a.columnList.Options = columnNames
	a.columnList.Selected = columnNames // –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	a.columnList.Refresh()

	a.groupByList.Options = columnNames
	a.groupByList.Refresh()

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É—Å–ª–æ–≤–∏—è
	a.updateExistingConditions()
}

// –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É—Å–ª–æ–≤–∏–π
func (a *AdvancedQueryWindow) updateExistingConditions() {
	columnNames := a.getColumnNames()

	// –û–±–Ω–æ–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏—è WHERE
	for i := range a.whereConditions {
		if i < len(a.whereContainer.Objects) {
			if conditionRow, ok := a.whereContainer.Objects[i].(*fyne.Container); ok {
				if columnSelect, ok := conditionRow.Objects[0].(*widget.Select); ok {
					columnSelect.Options = columnNames
					columnSelect.Refresh()
				}
			}
		}
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏—è ORDER BY
	for i := range a.orderByConditions {
		if i < len(a.orderByContainer.Objects) {
			if orderByRow, ok := a.orderByContainer.Objects[i].(*fyne.Container); ok {
				if columnSelect, ok := orderByRow.Objects[0].(*widget.Select); ok {
					columnSelect.Options = columnNames
					columnSelect.Refresh()
				}
			}
		}
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏—è HAVING
	for i := range a.havingConditions {
		if i < len(a.havingContainer.Objects) {
			if conditionRow, ok := a.havingContainer.Objects[i].(*fyne.Container); ok {
				if columnSelect, ok := conditionRow.Objects[0].(*widget.Select); ok {
					columnSelect.Options = columnNames
					columnSelect.Refresh()
				}
			}
		}
	}
}

func (a *AdvancedQueryWindow) buildQuery() (string, error) {
	// –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–∞
	if err := a.validateQuery(); err != nil {
		return "", err
	}

	table := a.tableSelect.Selected

	// SELECT —á–∞—Å—Ç—å
	var selectedColumns string
	if len(a.columnList.Selected) == 0 {
		selectedColumns = "*"
	} else {
		selectedColumns = strings.Join(a.columnList.Selected, ", ")
	}

	query := fmt.Sprintf("SELECT %s FROM %s", selectedColumns, table)

	// WHERE —É—Å–ª–æ–≤–∏—è
	whereClause, err := a.buildConditions(a.whereConditions)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –≤ —É—Å–ª–æ–≤–∏—è—Ö WHERE: %v", err)
	}
	if whereClause != "" {
		query += " WHERE " + whereClause
	}

	// GROUP BY
	if a.groupByList.Selected != "" {
		query += " GROUP BY " + a.groupByList.Selected
	}

	// HAVING —É—Å–ª–æ–≤–∏—è
	havingClause, err := a.buildConditions(a.havingConditions)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –≤ —É—Å–ª–æ–≤–∏—è—Ö HAVING: %v", err)
	}
	if havingClause != "" {
		query += " HAVING " + havingClause
	}

	// ORDER BY —É—Å–ª–æ–≤–∏—è
	orderByClause := a.buildOrderByConditions()
	if orderByClause != "" {
		query += " ORDER BY " + orderByClause
	}

	// LIMIT
	limitValue := int(a.limitSlider.Value)
	if limitValue > 0 {
		query += " LIMIT " + strconv.Itoa(limitValue)
	}

	return query, nil
}

func (a *AdvancedQueryWindow) buildConditions(conditions []WhereCondition) (string, error) {
	if len(conditions) == 0 {
		return "", nil
	}

	var conditionStrings []string
	for i, cond := range conditions {
		if cond.Column == "" || cond.Operator == "" {
			return "", fmt.Errorf("—É—Å–ª–æ–≤–∏–µ ‚Ññ%d: –Ω–µ —É–∫–∞–∑–∞–Ω —Å—Ç–æ–ª–±–µ—Ü –∏–ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä", i+1)
		}

		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
		var valueStr string
		switch cond.Operator {
		case "IS NULL", "IS NOT NULL":
			valueStr = "" // –≠—Ç–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç –∑–Ω–∞—á–µ–Ω–∏—è
		case "IN", "NOT IN":
			// –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ - —ç—Ç–æ —Å–ø–∏—Å–æ–∫, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–π –∑–∞–ø—è—Ç—ã–º–∏
			// –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
			values := strings.Split(cond.Value, ",")
			var escapedValues []string
			for _, v := range values {
				trimmed := strings.TrimSpace(v)
				if trimmed != "" {
					// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–º
					if _, err := strconv.Atoi(trimmed); err == nil {
						escapedValues = append(escapedValues, trimmed)
					} else {
						// –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
						escapedValue := strings.ReplaceAll(trimmed, "'", "''")
						escapedValues = append(escapedValues, "'"+escapedValue+"'")
					}
				}
			}
			if len(escapedValues) == 0 {
				return "", fmt.Errorf("—É—Å–ª–æ–≤–∏–µ ‚Ññ%d: –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ IN —É–∫–∞–∂–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é", i+1)
			}
			valueStr = "(" + strings.Join(escapedValues, ", ") + ")"
		default:
			// –î–ª—è —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–≤—ã—á–∫–∏
			if _, err := strconv.Atoi(cond.Value); err != nil {
				// –ï—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ, –æ–±—Ä–∞–º–ª—è–µ–º –∫–∞–≤—ã—á–∫–∞–º–∏ –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º
				escapedValue := strings.ReplaceAll(cond.Value, "'", "''")
				valueStr = "'" + escapedValue + "'"
			} else {
				valueStr = cond.Value
			}
		}

		conditionStr := cond.Column + " " + cond.Operator
		if valueStr != "" {
			conditionStr += " " + valueStr
		}
		conditionStrings = append(conditionStrings, conditionStr)
	}

	return strings.Join(conditionStrings, " AND "), nil
}

func (a *AdvancedQueryWindow) buildOrderByConditions() string {
	if len(a.orderByConditions) == 0 {
		return ""
	}

	var orderByStrings []string
	for _, cond := range a.orderByConditions {
		if cond.Column == "" {
			continue
		}
		orderByStrings = append(orderByStrings, a.formatOrderByCondition(cond))
	}

	return strings.Join(orderByStrings, ", ")
}

func (a *AdvancedQueryWindow) executeQuery() {
	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
	a.resultLabel.SetText("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å...")
	a.resultTable.Length = func() (int, int) { return 0, 0 }
	a.resultTable.Refresh()

	query, err := a.buildQuery()
	if err != nil {
		a.showError(err)
		a.resultLabel.SetText("–û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –∑–∞–ø—Ä–æ—Å–∞")
		return
	}

	a.sqlPreview.SetText(query)

	result, err := a.repository.ExecuteQuery(context.Background(), query)
	if err != nil {
		errorMsg := a.formatDatabaseError(err)
		a.showError(fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: %s", errorMsg))
		a.resultLabel.SetText("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞")
		return
	}

	if result.Error != "" {
		errorMsg := a.formatDatabaseError(fmt.Errorf("result.Error"))
		a.resultLabel.SetText("–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: " + errorMsg)
		return
	}

	a.displayResults(result)
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ–Ω—è—Ç–Ω—ã–π –≤–∏–¥
func (a *AdvancedQueryWindow) formatDatabaseError(err error) string {
	errorStr := err.Error()

	// PostgreSQL –æ—à–∏–±–∫–∏
	if strings.Contains(errorStr, "syntax error") {
		return "—Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ"
	}
	if strings.Contains(errorStr, "does not exist") {
		return "—Ç–∞–±–ª–∏—Ü–∞ –∏–ª–∏ —Å—Ç–æ–ª–±–µ—Ü –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
	}
	if strings.Contains(errorStr, "permission denied") {
		return "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏"
	}
	if strings.Contains(errorStr, "timeout") {
		return "–ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞"
	}
	if strings.Contains(errorStr, "connection") {
		return "–ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
	}
	if strings.Contains(errorStr, "division by zero") {
		return "–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å –≤ –∑–∞–ø—Ä–æ—Å–µ"
	}
	if strings.Contains(errorStr, "grouping error") {
		return "–æ—à–∏–±–∫–∞ –≤ GROUP BY: –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ GROUP BY –∏–ª–∏ –∞–≥—Ä–µ–≥–∞—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö"
	}
	if strings.Contains(errorStr, "aggregate functions") {
		return "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"
	}

	return "–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
}

func (a *AdvancedQueryWindow) displayResults(result *models.QueryResult) {
	if len(result.Rows) == 0 {
		a.resultTable.Length = func() (int, int) { return 1, 1 }
		a.resultTable.UpdateCell = func(id widget.TableCellID, obj fyne.CanvasObject) {
			label := obj.(*widget.Label)
			label.Wrapping = fyne.TextWrapWord
			if id.Row == 0 && id.Col == 0 {
				label.SetText("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
			}
		}
		a.resultLabel.SetText("–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ. –ù–∞–π–¥–µ–Ω–æ 0 —Å—Ç—Ä–æ–∫.")
		return
	}

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
	a.resultTable.Length = func() (int, int) {
		return len(result.Rows) + 1, len(result.Columns)
	}

	// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
	for col := 0; col < len(result.Columns); col++ {
		maxWidth := float32(120) // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞

		// –£—á–∏—Ç—ã–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∑–∞–≥–æ–ª–æ–≤–∫–∞
		headerWidth := float32(len(result.Columns[col])) * 8
		if headerWidth > maxWidth {
			maxWidth = headerWidth
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø–µ—Ä–≤—ã—Ö 20 —Å—Ç—Ä–æ–∫–∞—Ö –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —à–∏—Ä–∏–Ω—ã
		for row := 0; row < len(result.Rows) && row < 20; row++ {
			if value := result.Rows[row][result.Columns[col]]; value != nil {
				text := fmt.Sprintf("%v", value)
				textWidth := float32(len(text)) * 7
				if textWidth > maxWidth {
					maxWidth = textWidth
				}
			}
		}

		// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É
		if maxWidth > 400 {
			maxWidth = 400
		}
		a.resultTable.SetColumnWidth(col, maxWidth)
	}

	a.resultTable.UpdateCell = func(id widget.TableCellID, obj fyne.CanvasObject) {
		label := obj.(*widget.Label)
		label.Wrapping = fyne.TextWrapWord

		if id.Row == 0 {
			// –ó–∞–≥–æ–ª–æ–≤–∫–∏
			if id.Col < len(result.Columns) {
				label.SetText(result.Columns[id.Col])
				label.TextStyle = fyne.TextStyle{Bold: true}
			}
		} else {
			// –î–∞–Ω–Ω—ã–µ
			rowIndex := id.Row - 1
			if rowIndex < len(result.Rows) && id.Col < len(result.Columns) {
				value := result.Rows[rowIndex][result.Columns[id.Col]]
				if value != nil {
					label.SetText(fmt.Sprintf("%v", value))
				} else {
					label.SetText("NULL")
				}
			}
		}
	}

	a.resultLabel.SetText(fmt.Sprintf("–ù–∞–π–¥–µ–Ω–æ %d —Å—Ç—Ä–æ–∫", len(result.Rows)))
	a.resultTable.Refresh()
}

func (a *AdvancedQueryWindow) previewSQL() {
	query, err := a.buildQuery()
	if err != nil {
		a.showError(err)
		a.sqlPreview.SetText("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å SQL: " + err.Error())
		return
	}
	a.sqlPreview.SetText(query)
}

func (a *AdvancedQueryWindow) clearForm() {
	a.tableSelect.SetSelected("")
	a.columnList.Selected = []string{}
	a.whereContainer.Objects = nil
	a.orderByContainer.Objects = nil
	a.havingContainer.Objects = nil
	a.groupByList.SetSelected("")
	a.limitSlider.SetValue(100)
	a.limitLabel.SetText("LIMIT: 100")
	a.sqlPreview.SetText("")
	a.resultLabel.SetText("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å")
	a.resultTable.Length = func() (int, int) { return 0, 0 }
	a.resultTable.Refresh()

	a.whereConditions = []WhereCondition{}
	a.orderByConditions = []OrderByCondition{}
	a.havingConditions = []WhereCondition{}

	a.currentColumns = []models.ColumnInfo{}
}

func (a *AdvancedQueryWindow) showError(err error) {
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
	customDialog := dialog.NewCustom(
		"–û—à–∏–±–∫–∞",
		"–ó–∞–∫—Ä—ã—Ç—å",
		container.NewVBox(
			widget.NewLabel("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:"),
			widget.NewLabel(err.Error()),
			widget.NewLabel(""),
			widget.NewLabel("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."),
		),
		a.window,
	)
	customDialog.Show()
}

func (a *AdvancedQueryWindow) Show() {
	a.window.Show()
}
